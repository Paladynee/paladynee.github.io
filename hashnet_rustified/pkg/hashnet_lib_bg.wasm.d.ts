/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_rsvector2_free(a: number, b: number): void;
export function rsvector2_new(a: number, b: number): number;
export function rsvector2_make_clone(a: number): number;
export function rsvector2_get_x(a: number): number;
export function rsvector2_get_y(a: number): number;
export function rsvector2_set_vec(a: number, b: number): void;
export function rsvector2_add_vec(a: number, b: number): void;
export function rsvector2_add(a: number, b: number, c: number): void;
export function rsvector2_scale(a: number, b: number): void;
export function rsvector2_scale_vec(a: number, b: number): void;
export function rsvector2_normalize(a: number): void;
export function rsvector2_mag(a: number): number;
export function rsvector2_square(a: number): void;
export function rsvector2_to(a: number, b: number): void;
export function rsvector2_from(a: number, b: number): void;
export function rsvector2_neg(a: number): void;
export function rsvector2_one_over_d_sq(a: number, b: number, c: number): void;
export function rsvector2_divide(a: number, b: number, c: number): void;
export function rsvector2_divide_rand(a: number, b: number, c: number, d: number): void;
export function rsvector2_rotate(a: number, b: number): void;
export function rsvector2_arr(a: number, b: number): void;
export function __wbg_hsv_free(a: number, b: number): void;
export function __wbg_get_hsv_h(a: number): number;
export function __wbg_set_hsv_h(a: number, b: number): void;
export function __wbg_get_hsv_s(a: number): number;
export function __wbg_set_hsv_s(a: number, b: number): void;
export function __wbg_get_hsv_v(a: number): number;
export function __wbg_set_hsv_v(a: number, b: number): void;
export function hsv_rot_hue(a: number, b: number): number;
export function hsv_to_rgb(a: number): number;
export function __wbg_gameobject_free(a: number, b: number): void;
export function __wbg_gamestate_free(a: number, b: number): void;
export function __wbg_get_gamestate_object_amount(a: number): number;
export function __wbg_set_gamestate_object_amount(a: number, b: number): void;
export function __wbg_get_gamestate_canvas_w(a: number): number;
export function __wbg_set_gamestate_canvas_w(a: number, b: number): void;
export function __wbg_get_gamestate_canvas_h(a: number): number;
export function __wbg_set_gamestate_canvas_h(a: number, b: number): void;
export function __wbg_get_gamestate_help_menu(a: number): number;
export function __wbg_set_gamestate_help_menu(a: number, b: number): void;
export function __wbg_get_gamestate_mouse_prevent(a: number): number;
export function __wbg_set_gamestate_mouse_prevent(a: number, b: number): void;
export function __wbg_get_gamestate_obliterated(a: number): number;
export function __wbg_set_gamestate_obliterated(a: number, b: number): void;
export function __wbg_get_gamestate_clamping_behavior(a: number): number;
export function __wbg_set_gamestate_clamping_behavior(a: number, b: number): void;
export function __wbg_get_gamestate_line_offset(a: number): number;
export function __wbg_set_gamestate_line_offset(a: number, b: number): void;
export function __wbg_get_gamestate_grid_divisor(a: number): number;
export function __wbg_set_gamestate_grid_divisor(a: number, b: number): void;
export function __wbg_get_gamestate_grid_spacing_px(a: number): number;
export function __wbg_set_gamestate_grid_spacing_px(a: number, b: number): void;
export function __wbg_get_gamestate_physics_resolution(a: number): number;
export function __wbg_set_gamestate_physics_resolution(a: number, b: number): void;
export function __wbg_get_gamestate_neo_physics_handler(a: number): number;
export function __wbg_set_gamestate_neo_physics_handler(a: number, b: number): void;
export function gamestate_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function gamestate_update(a: number, b: number): void;
export function gamestate_pressed_key(a: number, b: number, c: number): void;
export function gamestate_released_key(a: number, b: number, c: number): void;
export function gamestate_is_key_pressed(a: number, b: number, c: number): number;
export function gamestate_get_test_string(a: number, b: number): void;
export function gamestate_update_timer(a: number, b: number): number;
export function gamestate_handle_tactile_keystroke(a: number, b: number, c: number): void;
export function gamestate_handle_mouse_left_click(a: number): void;
export function gamestate_handle_mouse_right_click(a: number): void;
export function gamestate_render(a: number, b: number): void;
export function gamestate_increase_time_dilation(a: number): void;
export function gamestate_decrease_time_dilation(a: number): void;
export function gamestate_set_mouse(a: number, b: number, c: number): void;
export function __wbg_renderinformation_free(a: number, b: number): void;
export function __wbg_get_renderinformation_tvx(a: number): number;
export function __wbg_set_renderinformation_tvx(a: number, b: number): void;
export function __wbg_get_renderinformation_tvy(a: number): number;
export function __wbg_set_renderinformation_tvy(a: number, b: number): void;
export function __wbg_get_renderinformation_sqx(a: number): number;
export function __wbg_set_renderinformation_sqx(a: number, b: number): void;
export function __wbg_get_renderinformation_sqy(a: number): number;
export function __wbg_set_renderinformation_sqy(a: number, b: number): void;
export function __wbg_get_renderinformation_sx(a: number): number;
export function __wbg_set_renderinformation_sx(a: number, b: number): void;
export function __wbg_get_renderinformation_sy(a: number): number;
export function __wbg_set_renderinformation_sy(a: number, b: number): void;
export function __wbg_get_renderinformation_r(a: number): number;
export function __wbg_set_renderinformation_r(a: number, b: number): void;
export function greet(a: number, b: number): void;
export function __wbg_get_rsvector2_x(a: number): number;
export function __wbg_get_rsvector2_y(a: number): number;
export function __wbg_get_rgb_r(a: number): number;
export function __wbg_get_rgb_g(a: number): number;
export function __wbg_get_rgb_b(a: number): number;
export function __wbg_get_renderinformation_line_width(a: number): number;
export function __wbg_get_renderinformation_posx(a: number): number;
export function __wbg_get_renderinformation_posy(a: number): number;
export function __wbg_get_renderinformation_g(a: number): number;
export function __wbg_get_renderinformation_b(a: number): number;
export function rsvector2_set(a: number, b: number, c: number): void;
export function gamestate_update_mouse_position(a: number, b: number, c: number): void;
export function __wbg_rgb_free(a: number, b: number): void;
export function __wbg_set_rsvector2_x(a: number, b: number): void;
export function __wbg_set_rsvector2_y(a: number, b: number): void;
export function __wbg_set_rgb_r(a: number, b: number): void;
export function __wbg_set_rgb_g(a: number, b: number): void;
export function __wbg_set_rgb_b(a: number, b: number): void;
export function __wbg_set_renderinformation_line_width(a: number, b: number): void;
export function __wbg_set_renderinformation_posx(a: number, b: number): void;
export function __wbg_set_renderinformation_posy(a: number, b: number): void;
export function __wbg_set_renderinformation_g(a: number, b: number): void;
export function __wbg_set_renderinformation_b(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_export_0(a: number, b: number, c: number): void;
export function __wbindgen_export_1(a: number, b: number): number;
export function __wbindgen_export_2(a: number, b: number, c: number, d: number): number;
export function __wbindgen_export_3(a: number): void;
